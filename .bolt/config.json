{
  "prompts": [
    {
      "name": "Add New Migration Phase",
      "description": "Create a new migration phase for correspondence processing",
      "prompt": "I need to add a new migration phase called '{PHASE_NAME}' for {CORRESPONDENCE_TYPE} correspondences. The phase should:\n\n1. Process {ENTITY_TYPE} data from the source system\n2. Call the destination API endpoint: {API_ENDPOINT}\n3. Include step-based processing with fault tolerance\n4. Track progress in the database with retry logic\n5. Add corresponding Angular UI components for monitoring\n\nPlease follow the same patterns as existing phases:\n- Create phase service in appropriate package\n- Add repository methods with pagination\n- Update main migration service\n- Add controller endpoints\n- Create Angular components\n- Update navigation and routing\n\nThe phase should handle these specific operations:\n{OPERATIONS_LIST}"
    },
    {
      "name": "Add New Entity Import",
      "description": "Add import functionality for a new entity type",
      "prompt": "I need to add import functionality for a new entity called '{ENTITY_NAME}'. Please:\n\n1. Create the entity class with proper JPA annotations and indexes\n2. Create repository interface with custom queries\n3. Add import method in DataImportService\n4. Add controller endpoint with Swagger documentation\n5. Add count endpoint for UI statistics\n6. Update Angular UI to include this entity in source data import\n\nEntity details:\n- Source API endpoint: {SOURCE_ENDPOINT}\n- Primary key field: {PRIMARY_KEY}\n- Important fields: {FIELD_LIST}\n- Relationships: {RELATIONSHIPS}\n\nFollow the same patterns as existing entities like Classification, Contact, etc."
    },
    {
      "name": "Add Destination API Integration",
      "description": "Integrate with a new destination system API endpoint",
      "prompt": "I need to integrate with a new destination system API for {OPERATION_NAME}. Please:\n\n1. Create DTO classes for request/response\n2. Add method in DestinationSystemService or OutgoingDestinationSystemService\n3. Include proper error handling and logging\n4. Add Keycloak token authentication\n5. Map source data fields to destination API format\n\nAPI Details:\n- Endpoint: {API_ENDPOINT}\n- Operation: {OPERATION_NAME}\n- Request format: {REQUEST_FORMAT}\n- Required parameters: {PARAMETERS}\n- Authentication: Bearer token from Keycloak\n\nFollow the same patterns as existing API integrations like createIncomingCorrespondence, createAssignment, etc."
    },
    {
      "name": "Add Angular Detail Component",
      "description": "Create a new Angular component for detailed migration monitoring",
      "prompt": "I need to create a new Angular component called '{COMPONENT_NAME}' for monitoring {PHASE_NAME} phase details. Please:\n\n1. Create component with TypeScript, HTML, and CSS files\n2. Include pagination, search, and filtering capabilities\n3. Add selection functionality for bulk operations\n4. Include status indicators and progress tracking\n5. Add retry and execute actions for individual records\n6. Follow the same patterns as existing detail components\n\nComponent requirements:\n- Display fields: {DISPLAY_FIELDS}\n- Filter options: {FILTER_OPTIONS}\n- Actions: {AVAILABLE_ACTIONS}\n- API endpoint: {API_ENDPOINT}\n\nUse the same styling and layout patterns as AssignmentDetailsComponent, CreationDetailsComponent, etc."
    },
    {
      "name": "Add Database Migration",
      "description": "Create database schema changes for new features",
      "prompt": "I need to add database changes for {FEATURE_NAME}. Please:\n\n1. Create new Supabase migration file with descriptive name\n2. Include proper indexes for performance\n3. Add foreign key constraints where appropriate\n4. Include migration summary in comments\n5. Follow naming conventions and best practices\n\nChanges needed:\n- New tables: {NEW_TABLES}\n- Modified tables: {MODIFIED_TABLES}\n- New indexes: {NEW_INDEXES}\n- Data migration: {DATA_MIGRATION_NEEDED}\n\nEnsure the migration is safe and includes rollback considerations."
    },
    {
      "name": "Add Utility Class",
      "description": "Create a new utility class for data transformation",
      "prompt": "I need to create a utility class called '{UTILITY_NAME}' for {PURPOSE}. Please:\n\n1. Create static utility methods with proper logging\n2. Include comprehensive error handling\n3. Add unit tests for all methods\n4. Include JavaDoc documentation\n5. Follow the same patterns as existing utilities\n\nUtility requirements:\n- Main functionality: {MAIN_FUNCTIONALITY}\n- Input/output types: {INPUT_OUTPUT_TYPES}\n- Mapping rules: {MAPPING_RULES}\n- Error handling: {ERROR_HANDLING}\n\nFollow the patterns of AgencyMappingUtils, DepartmentUtils, CorrespondenceUtils, etc."
    },
    {
      "name": "Add Configuration Properties",
      "description": "Add new configuration properties for features",
      "prompt": "I need to add configuration properties for {FEATURE_NAME}. Please:\n\n1. Add properties to application.properties with defaults\n2. Add properties to application-docker.properties\n3. Add properties to application-prod.properties\n4. Create @Value annotations in relevant services\n5. Add validation and documentation\n\nConfiguration needed:\n- Property prefix: {PROPERTY_PREFIX}\n- Properties: {PROPERTY_LIST}\n- Default values: {DEFAULT_VALUES}\n- Environment-specific values: {ENV_SPECIFIC}\n\nEnsure properties are properly documented and have sensible defaults."
    },
    {
      "name": "Add Error Handling",
      "description": "Improve error handling for specific scenarios",
      "prompt": "I need to improve error handling for {SCENARIO}. Please:\n\n1. Add specific exception classes if needed\n2. Implement proper error recovery mechanisms\n3. Add detailed logging with context\n4. Update UI to display meaningful error messages\n5. Add retry logic where appropriate\n\nError handling requirements:\n- Error types: {ERROR_TYPES}\n- Recovery actions: {RECOVERY_ACTIONS}\n- User feedback: {USER_FEEDBACK}\n- Logging level: {LOGGING_LEVEL}\n\nFollow the patterns established in existing error handling throughout the application."
    },
    {
      "name": "Add Performance Optimization",
      "description": "Optimize performance for specific operations",
      "prompt": "I need to optimize performance for {OPERATION_NAME}. Please:\n\n1. Analyze current bottlenecks and inefficiencies\n2. Add database indexes where needed\n3. Implement batch processing if applicable\n4. Add caching mechanisms where appropriate\n5. Optimize queries and reduce N+1 problems\n6. Add performance monitoring and metrics\n\nOptimization targets:\n- Operation: {OPERATION_NAME}\n- Current performance: {CURRENT_PERFORMANCE}\n- Target performance: {TARGET_PERFORMANCE}\n- Constraints: {CONSTRAINTS}\n\nEnsure optimizations don't compromise data integrity or system reliability."
    },
    {
      "name": "Add Monitoring Dashboard",
      "description": "Create monitoring dashboard for system health",
      "prompt": "I need to create a monitoring dashboard for {SYSTEM_COMPONENT}. Please:\n\n1. Create Angular component with real-time data\n2. Add backend endpoints for metrics collection\n3. Include charts and visualizations\n4. Add alerting for critical issues\n5. Include system health indicators\n\nDashboard requirements:\n- Metrics to display: {METRICS_LIST}\n- Refresh interval: {REFRESH_INTERVAL}\n- Alert thresholds: {ALERT_THRESHOLDS}\n- Chart types: {CHART_TYPES}\n\nFollow the design patterns of existing dashboard components."
    },
    {
      "name": "Add Bulk Operations",
      "description": "Implement bulk operations for efficiency",
      "prompt": "I need to add bulk operations for {OPERATION_TYPE}. Please:\n\n1. Create bulk processing endpoints\n2. Implement batch processing with proper transaction management\n3. Add progress tracking for long-running operations\n4. Include bulk selection UI components\n5. Add proper error handling for partial failures\n\nBulk operation requirements:\n- Operation type: {OPERATION_TYPE}\n- Batch size: {BATCH_SIZE}\n- Progress tracking: {PROGRESS_TRACKING}\n- Error handling: {ERROR_HANDLING}\n\nEnsure bulk operations maintain data consistency and provide meaningful progress feedback."
    },
    {
      "name": "Add Data Validation",
      "description": "Implement comprehensive data validation",
      "prompt": "I need to add data validation for {DATA_TYPE}. Please:\n\n1. Create validation service with business rules\n2. Add validation annotations to entities\n3. Implement custom validators where needed\n4. Add validation error reporting\n5. Include pre-migration validation checks\n\nValidation requirements:\n- Data type: {DATA_TYPE}\n- Validation rules: {VALIDATION_RULES}\n- Error reporting: {ERROR_REPORTING}\n- Performance considerations: {PERFORMANCE_NOTES}\n\nFollow Spring Boot validation best practices and provide clear error messages."
    },
    {
      "name": "Add Integration Test",
      "description": "Create comprehensive integration tests",
      "prompt": "I need to add integration tests for {FEATURE_NAME}. Please:\n\n1. Create test classes with proper setup/teardown\n2. Mock external API calls appropriately\n3. Test both success and failure scenarios\n4. Include database state verification\n5. Add performance benchmarks\n\nTest requirements:\n- Feature: {FEATURE_NAME}\n- Test scenarios: {TEST_SCENARIOS}\n- Mock requirements: {MOCK_REQUIREMENTS}\n- Performance targets: {PERFORMANCE_TARGETS}\n\nFollow the testing patterns and use appropriate Spring Boot test annotations."
    },
    {
      "name": "Add Security Enhancement",
      "description": "Enhance security for specific components",
      "prompt": "I need to enhance security for {COMPONENT_NAME}. Please:\n\n1. Add authentication and authorization checks\n2. Implement input validation and sanitization\n3. Add audit logging for sensitive operations\n4. Include rate limiting where appropriate\n5. Add security headers and CORS configuration\n\nSecurity requirements:\n- Component: {COMPONENT_NAME}\n- Security level: {SECURITY_LEVEL}\n- Authentication method: {AUTH_METHOD}\n- Audit requirements: {AUDIT_REQUIREMENTS}\n\nFollow security best practices and ensure compliance with data protection requirements."
    },
    {
      "name": "Add Reporting Feature",
      "description": "Create reporting functionality for migration data",
      "prompt": "I need to add reporting functionality for {REPORT_TYPE}. Please:\n\n1. Create report generation service\n2. Add export functionality (CSV, Excel, PDF)\n3. Include filtering and date range selection\n4. Add scheduled report generation\n5. Create Angular UI for report management\n\nReport requirements:\n- Report type: {REPORT_TYPE}\n- Data sources: {DATA_SOURCES}\n- Export formats: {EXPORT_FORMATS}\n- Scheduling: {SCHEDULING_REQUIREMENTS}\n\nEnsure reports are performant and don't impact system operations."
    },
    {
      "name": "Debug Migration Issue",
      "description": "Debug and fix migration-related issues",
      "prompt": "I'm experiencing an issue with {ISSUE_DESCRIPTION}. Please help me:\n\n1. Analyze the problem and identify root cause\n2. Check relevant logs and database state\n3. Provide step-by-step debugging approach\n4. Suggest fixes with minimal impact\n5. Add preventive measures for future\n\nIssue details:\n- Component affected: {COMPONENT}\n- Error symptoms: {SYMPTOMS}\n- When it occurs: {OCCURRENCE_PATTERN}\n- Impact: {IMPACT_LEVEL}\n\nProvide both immediate fixes and long-term improvements."
    }
  ],
  "systemContext": {
    "projectType": "Spring Boot + Angular Data Migration System",
    "architecture": "Microservices with phase-based processing",
    "database": "MySQL with JPA/Hibernate",
    "frontend": "Angular with TypeScript",
    "keyPatterns": [
      "Step-based processing with fault tolerance",
      "Phase-driven migration workflow",
      "Real-time monitoring and statistics",
      "Comprehensive error handling and retry logic",
      "Modular service architecture",
      "RESTful API design with Swagger documentation",
      "Responsive Angular UI with Tailwind CSS"
    ],
    "codeStyle": {
      "backend": "Spring Boot best practices with comprehensive logging",
      "frontend": "Angular with reactive patterns and TypeScript",
      "database": "JPA entities with proper indexing and relationships",
      "api": "RESTful design with proper HTTP status codes"
    },
    "testingApproach": "Integration tests with mocked external dependencies",
    "deploymentStrategy": "Docker Compose for development, containerized for production"
  },
  "commonRequirements": {
    "errorHandling": "Always include comprehensive error handling with meaningful messages",
    "logging": "Add structured logging with appropriate levels (DEBUG, INFO, WARN, ERROR)",
    "documentation": "Include JavaDoc for backend and JSDoc for frontend",
    "validation": "Add input validation and sanitization",
    "performance": "Consider performance implications and add monitoring",
    "security": "Follow security best practices for authentication and data protection",
    "testing": "Include unit and integration tests",
    "uiConsistency": "Follow existing UI patterns and styling conventions"
  },
  "technicalStack": {
    "backend": {
      "framework": "Spring Boot 2.7.18",
      "database": "MySQL 8.0 with JPA/Hibernate",
      "security": "Keycloak JWT authentication",
      "documentation": "Swagger/OpenAPI 3",
      "testing": "JUnit with Spring Boot Test",
      "buildTool": "Maven"
    },
    "frontend": {
      "framework": "Angular 17",
      "styling": "Tailwind CSS",
      "httpClient": "Angular HttpClient with RxJS",
      "routing": "Angular Router",
      "stateManagement": "RxJS BehaviorSubject for shared state"
    },
    "infrastructure": {
      "containerization": "Docker with Docker Compose",
      "database": "MySQL 8.0 with optimized configuration",
      "networking": "CORS enabled for development",
      "monitoring": "Application logs and database performance metrics"
    }
  },
  "migrationPatterns": {
    "phaseStructure": {
      "incoming": ["PREPARE_DATA", "CREATION", "ASSIGNMENT", "BUSINESS_LOG", "COMMENT", "CLOSING"],
      "outgoing": ["PREPARE_DATA", "CREATION", "ASSIGNMENT", "APPROVAL", "BUSINESS_LOG", "COMMENT", "CLOSING"]
    },
    "stepBasedProcessing": {
      "creationSteps": ["GET_DETAILS", "GET_ATTACHMENTS", "UPLOAD_MAIN_ATTACHMENT", "CREATE_CORRESPONDENCE", "UPLOAD_OTHER_ATTACHMENTS", "CREATE_PHYSICAL_ATTACHMENT", "SET_READY_TO_REGISTER", "REGISTER_WITH_REFERENCE", "START_WORK", "SET_OWNER", "COMPLETED"],
      "approvalSteps": ["APPROVE_CORRESPONDENCE", "REGISTER_WITH_REFERENCE", "SEND_CORRESPONDENCE", "COMPLETED"]
    },
    "faultTolerance": {
      "stepPersistence": "Save current step to database after each successful operation",
      "resumeCapability": "Allow resuming from last successful step on retry",
      "errorIsolation": "Individual failures don't affect other records",
      "retryLogic": "Exponential backoff with maximum retry limits"
    }
  },
  "apiPatterns": {
    "destinationEndpoints": {
      "baseUrl": "http://18.206.121.44/nuxeo/api/v1/custom-automation/AC_Admin_RunOperation",
      "uploadUrl": "http://18.206.121.44/nuxeo/api/v1/upload/",
      "authentication": "Bearer token from Keycloak",
      "commonParams": ["operationName", "asUser", "docID", "docDate", "guid", "docCreator"],
      "commonContext": ["tenantId", "isReadOnly"]
    },
    "sourceEndpoints": {
      "baseUrl": "https://itba.tarasol.cloud/Tarasol4ExtractorApi/Api/secure",
      "authentication": "X-API-KEY header",
      "responseFormat": "ApiResponseDto<T> with Data, Success, Message fields"
    }
  },
  "databasePatterns": {
    "entityStructure": {
      "baseEntity": "Extends BaseEntity with creation_date, last_modified_date, migrate_status",
      "indexes": "Add indexes for frequently queried columns (GUIDs, status, dates)",
      "relationships": "Use proper JPA annotations for foreign keys",
      "naming": "Snake_case for database columns, camelCase for Java fields"
    },
    "migrationTracking": {
      "statusValues": ["PENDING", "IN_PROGRESS", "SUCCESS", "FAILED", "COMPLETED"],
      "retryLogic": "retry_count field with max_retries limit",
      "timestamping": "creation_date, last_modified_date, started_at, completed_at, last_error_at"
    }
  },
  "uiPatterns": {
    "componentStructure": {
      "layout": "Header with actions, filters section, data table with pagination",
      "styling": "Tailwind CSS with consistent color scheme and spacing",
      "interactions": "Hover effects, loading states, status indicators",
      "responsiveness": "Mobile-friendly with appropriate breakpoints"
    },
    "dataDisplay": {
      "pagination": "Server-side pagination with configurable page sizes",
      "filtering": "Status, search, and entity-specific filters",
      "selection": "Checkbox selection for bulk operations",
      "statusIndicators": "Color-coded badges with icons"
    }
  },
  "troubleshootingGuides": {
    "commonIssues": [
      "Keycloak token expiration - check /api/health/keycloak-token",
      "Database connection issues - verify Docker containers and credentials",
      "File upload failures - check file size limits and base64 encoding",
      "Step progression issues - check creation_step field in database",
      "API authentication failures - verify Bearer token and permissions"
    ],
    "debuggingSteps": [
      "Check application logs for detailed error messages",
      "Verify database state and migration tracking tables",
      "Test API endpoints individually with curl or Postman",
      "Monitor database performance and connection pool status",
      "Check Angular browser console for frontend issues"
    ]
  },
  "bestPractices": {
    "codeOrganization": [
      "Single responsibility principle for services",
      "Proper separation of concerns between layers",
      "Consistent naming conventions across all components",
      "Comprehensive error handling at all levels",
      "Proper transaction boundaries and isolation"
    ],
    "performance": [
      "Use native queries for complex pagination",
      "Implement proper indexing strategy",
      "Minimize transaction scope and duration",
      "Use connection pooling with appropriate settings",
      "Implement step-based processing for long operations"
    ],
    "security": [
      "Validate all inputs and sanitize data",
      "Use parameterized queries to prevent SQL injection",
      "Implement proper authentication and authorization",
      "Log security-relevant events for auditing",
      "Follow principle of least privilege"
    ]
  }
}